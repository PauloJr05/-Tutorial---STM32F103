
ADC-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08001e28  08001e28  00011e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001e88  08001e88  00011e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001e8c  08001e8c  00011e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000054  2000000c  08001e9c  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000060  08001e9c  00020060  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ac74  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001a8e  00000000  00000000  0002aca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000528  00000000  00000000  0002c738  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000460  00000000  00000000  0002cc60  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002f8d  00000000  00000000  0002d0c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001c71  00000000  00000000  0003004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00031cbe  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001204  00000000  00000000  00031d3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001e10 	.word	0x08001e10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001e10 	.word	0x08001e10

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a08      	ldr	r2, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fd15 	bl	8000b8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 fd4a 	bl	8001c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 fd1f 	bl	8000bda <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 fcf5 	bl	8000ba2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000028 	.word	0x20000028

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000028 	.word	0x20000028

08000210 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b086      	sub	sp, #24
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000218:	2300      	movs	r3, #0
 800021a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800021c:	2300      	movs	r3, #0
 800021e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000220:	2300      	movs	r3, #0
 8000222:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000224:	2300      	movs	r3, #0
 8000226:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d101      	bne.n	8000232 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800022e:	2301      	movs	r3, #1
 8000230:	e0be      	b.n	80003b0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	689b      	ldr	r3, [r3, #8]
 8000236:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800023c:	2b00      	cmp	r3, #0
 800023e:	d109      	bne.n	8000254 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2200      	movs	r2, #0
 8000244:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2200      	movs	r2, #0
 800024a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f001 fc02 	bl	8001a58 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000254:	6878      	ldr	r0, [r7, #4]
 8000256:	f000 fbb1 	bl	80009bc <ADC_ConversionStop_Disable>
 800025a:	4603      	mov	r3, r0
 800025c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000262:	f003 0310 	and.w	r3, r3, #16
 8000266:	2b00      	cmp	r3, #0
 8000268:	f040 8099 	bne.w	800039e <HAL_ADC_Init+0x18e>
 800026c:	7dfb      	ldrb	r3, [r7, #23]
 800026e:	2b00      	cmp	r3, #0
 8000270:	f040 8095 	bne.w	800039e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000278:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800027c:	f023 0302 	bic.w	r3, r3, #2
 8000280:	f043 0202 	orr.w	r2, r3, #2
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000290:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	68db      	ldr	r3, [r3, #12]
 8000296:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000298:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800029a:	68ba      	ldr	r2, [r7, #8]
 800029c:	4313      	orrs	r3, r2
 800029e:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002a8:	d003      	beq.n	80002b2 <HAL_ADC_Init+0xa2>
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	689b      	ldr	r3, [r3, #8]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d102      	bne.n	80002b8 <HAL_ADC_Init+0xa8>
 80002b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b6:	e000      	b.n	80002ba <HAL_ADC_Init+0xaa>
 80002b8:	2300      	movs	r3, #0
 80002ba:	693a      	ldr	r2, [r7, #16]
 80002bc:	4313      	orrs	r3, r2
 80002be:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d119      	bne.n	80002fc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	68db      	ldr	r3, [r3, #12]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d109      	bne.n	80002e4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	3b01      	subs	r3, #1
 80002d6:	035a      	lsls	r2, r3, #13
 80002d8:	693b      	ldr	r3, [r7, #16]
 80002da:	4313      	orrs	r3, r2
 80002dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002e0:	613b      	str	r3, [r7, #16]
 80002e2:	e00b      	b.n	80002fc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002e8:	f043 0220 	orr.w	r2, r3, #32
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002f4:	f043 0201 	orr.w	r2, r3, #1
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	6812      	ldr	r2, [r2, #0]
 8000304:	6852      	ldr	r2, [r2, #4]
 8000306:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 800030a:	693a      	ldr	r2, [r7, #16]
 800030c:	430a      	orrs	r2, r1
 800030e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681a      	ldr	r2, [r3, #0]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	6899      	ldr	r1, [r3, #8]
 800031a:	4b27      	ldr	r3, [pc, #156]	; (80003b8 <HAL_ADC_Init+0x1a8>)
 800031c:	400b      	ands	r3, r1
 800031e:	68b9      	ldr	r1, [r7, #8]
 8000320:	430b      	orrs	r3, r1
 8000322:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800032c:	d003      	beq.n	8000336 <HAL_ADC_Init+0x126>
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	2b01      	cmp	r3, #1
 8000334:	d104      	bne.n	8000340 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	691b      	ldr	r3, [r3, #16]
 800033a:	3b01      	subs	r3, #1
 800033c:	051b      	lsls	r3, r3, #20
 800033e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	6812      	ldr	r2, [r2, #0]
 8000348:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800034a:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 800034e:	68fa      	ldr	r2, [r7, #12]
 8000350:	430a      	orrs	r2, r1
 8000352:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	689a      	ldr	r2, [r3, #8]
 800035a:	4b18      	ldr	r3, [pc, #96]	; (80003bc <HAL_ADC_Init+0x1ac>)
 800035c:	4013      	ands	r3, r2
 800035e:	68ba      	ldr	r2, [r7, #8]
 8000360:	4293      	cmp	r3, r2
 8000362:	d10b      	bne.n	800037c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2200      	movs	r2, #0
 8000368:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800036e:	f023 0303 	bic.w	r3, r3, #3
 8000372:	f043 0201 	orr.w	r2, r3, #1
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800037a:	e018      	b.n	80003ae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000380:	f023 0312 	bic.w	r3, r3, #18
 8000384:	f043 0210 	orr.w	r2, r3, #16
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000390:	f043 0201 	orr.w	r2, r3, #1
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000398:	2301      	movs	r3, #1
 800039a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800039c:	e007      	b.n	80003ae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003a2:	f043 0210 	orr.w	r2, r3, #16
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80003aa:	2301      	movs	r3, #1
 80003ac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80003ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	3718      	adds	r7, #24
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	ffe1f7fd 	.word	0xffe1f7fd
 80003bc:	ff1f0efe 	.word	0xff1f0efe

080003c0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003c8:	2300      	movs	r3, #0
 80003ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d101      	bne.n	80003da <HAL_ADC_Start+0x1a>
 80003d6:	2302      	movs	r3, #2
 80003d8:	e098      	b.n	800050c <HAL_ADC_Start+0x14c>
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2201      	movs	r2, #1
 80003de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80003e2:	6878      	ldr	r0, [r7, #4]
 80003e4:	f000 fa98 	bl	8000918 <ADC_Enable>
 80003e8:	4603      	mov	r3, r0
 80003ea:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80003ec:	7bfb      	ldrb	r3, [r7, #15]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	f040 8087 	bne.w	8000502 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80003fc:	f023 0301 	bic.w	r3, r3, #1
 8000400:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a41      	ldr	r2, [pc, #260]	; (8000514 <HAL_ADC_Start+0x154>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d105      	bne.n	800041e <HAL_ADC_Start+0x5e>
 8000412:	4b41      	ldr	r3, [pc, #260]	; (8000518 <HAL_ADC_Start+0x158>)
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800041a:	2b00      	cmp	r3, #0
 800041c:	d115      	bne.n	800044a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000422:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000434:	2b00      	cmp	r3, #0
 8000436:	d026      	beq.n	8000486 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800043c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000440:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000448:	e01d      	b.n	8000486 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800044e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a2f      	ldr	r2, [pc, #188]	; (8000518 <HAL_ADC_Start+0x158>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d004      	beq.n	800046a <HAL_ADC_Start+0xaa>
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a2b      	ldr	r2, [pc, #172]	; (8000514 <HAL_ADC_Start+0x154>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d10d      	bne.n	8000486 <HAL_ADC_Start+0xc6>
 800046a:	4b2b      	ldr	r3, [pc, #172]	; (8000518 <HAL_ADC_Start+0x158>)
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000472:	2b00      	cmp	r3, #0
 8000474:	d007      	beq.n	8000486 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800047a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800047e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800048a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800048e:	2b00      	cmp	r3, #0
 8000490:	d006      	beq.n	80004a0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000496:	f023 0206 	bic.w	r2, r3, #6
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	62da      	str	r2, [r3, #44]	; 0x2c
 800049e:	e002      	b.n	80004a6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2200      	movs	r2, #0
 80004a4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	2200      	movs	r2, #0
 80004aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f06f 0202 	mvn.w	r2, #2
 80004b6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	689b      	ldr	r3, [r3, #8]
 80004be:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80004c2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80004c6:	d113      	bne.n	80004f0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80004cc:	4a11      	ldr	r2, [pc, #68]	; (8000514 <HAL_ADC_Start+0x154>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d105      	bne.n	80004de <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80004d2:	4b11      	ldr	r3, [pc, #68]	; (8000518 <HAL_ADC_Start+0x158>)
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d108      	bne.n	80004f0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	687a      	ldr	r2, [r7, #4]
 80004e4:	6812      	ldr	r2, [r2, #0]
 80004e6:	6892      	ldr	r2, [r2, #8]
 80004e8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	e00c      	b.n	800050a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	6812      	ldr	r2, [r2, #0]
 80004f8:	6892      	ldr	r2, [r2, #8]
 80004fa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	e003      	b.n	800050a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2200      	movs	r2, #0
 8000506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800050a:	7bfb      	ldrb	r3, [r7, #15]
}
 800050c:	4618      	mov	r0, r3
 800050e:	3710      	adds	r7, #16
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40012800 	.word	0x40012800
 8000518:	40012400 	.word	0x40012400

0800051c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b087      	sub	sp, #28
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800052e:	2300      	movs	r3, #0
 8000530:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000532:	f7ff fe63 	bl	80001fc <HAL_GetTick>
 8000536:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	689b      	ldr	r3, [r3, #8]
 800053e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000542:	2b00      	cmp	r3, #0
 8000544:	d00b      	beq.n	800055e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800054a:	f043 0220 	orr.w	r2, r3, #32
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2200      	movs	r2, #0
 8000556:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800055a:	2301      	movs	r3, #1
 800055c:	e0c8      	b.n	80006f0 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000568:	2b00      	cmp	r3, #0
 800056a:	d12a      	bne.n	80005c2 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000572:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000576:	2b00      	cmp	r3, #0
 8000578:	d123      	bne.n	80005c2 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800057a:	e01a      	b.n	80005b2 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000582:	d016      	beq.n	80005b2 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d007      	beq.n	800059a <HAL_ADC_PollForConversion+0x7e>
 800058a:	f7ff fe37 	bl	80001fc <HAL_GetTick>
 800058e:	4602      	mov	r2, r0
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	1ad2      	subs	r2, r2, r3
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	429a      	cmp	r2, r3
 8000598:	d90b      	bls.n	80005b2 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800059e:	f043 0204 	orr.w	r2, r3, #4
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2200      	movs	r2, #0
 80005aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80005ae:	2303      	movs	r3, #3
 80005b0:	e09e      	b.n	80006f0 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f003 0302 	and.w	r3, r3, #2
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d0dd      	beq.n	800057c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80005c0:	e06c      	b.n	800069c <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80005c2:	4b4d      	ldr	r3, [pc, #308]	; (80006f8 <HAL_ADC_PollForConversion+0x1dc>)
 80005c4:	681c      	ldr	r4, [r3, #0]
 80005c6:	2002      	movs	r0, #2
 80005c8:	f001 f946 	bl	8001858 <HAL_RCCEx_GetPeriphCLKFreq>
 80005cc:	4603      	mov	r3, r0
 80005ce:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	6919      	ldr	r1, [r3, #16]
 80005d8:	4b48      	ldr	r3, [pc, #288]	; (80006fc <HAL_ADC_PollForConversion+0x1e0>)
 80005da:	400b      	ands	r3, r1
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d118      	bne.n	8000612 <HAL_ADC_PollForConversion+0xf6>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	68d9      	ldr	r1, [r3, #12]
 80005e6:	4b46      	ldr	r3, [pc, #280]	; (8000700 <HAL_ADC_PollForConversion+0x1e4>)
 80005e8:	400b      	ands	r3, r1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d111      	bne.n	8000612 <HAL_ADC_PollForConversion+0xf6>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	6919      	ldr	r1, [r3, #16]
 80005f4:	4b43      	ldr	r3, [pc, #268]	; (8000704 <HAL_ADC_PollForConversion+0x1e8>)
 80005f6:	400b      	ands	r3, r1
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d108      	bne.n	800060e <HAL_ADC_PollForConversion+0xf2>
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	68d9      	ldr	r1, [r3, #12]
 8000602:	4b41      	ldr	r3, [pc, #260]	; (8000708 <HAL_ADC_PollForConversion+0x1ec>)
 8000604:	400b      	ands	r3, r1
 8000606:	2b00      	cmp	r3, #0
 8000608:	d101      	bne.n	800060e <HAL_ADC_PollForConversion+0xf2>
 800060a:	2314      	movs	r3, #20
 800060c:	e020      	b.n	8000650 <HAL_ADC_PollForConversion+0x134>
 800060e:	2329      	movs	r3, #41	; 0x29
 8000610:	e01e      	b.n	8000650 <HAL_ADC_PollForConversion+0x134>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	6919      	ldr	r1, [r3, #16]
 8000618:	4b3a      	ldr	r3, [pc, #232]	; (8000704 <HAL_ADC_PollForConversion+0x1e8>)
 800061a:	400b      	ands	r3, r1
 800061c:	2b00      	cmp	r3, #0
 800061e:	d106      	bne.n	800062e <HAL_ADC_PollForConversion+0x112>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	68d9      	ldr	r1, [r3, #12]
 8000626:	4b38      	ldr	r3, [pc, #224]	; (8000708 <HAL_ADC_PollForConversion+0x1ec>)
 8000628:	400b      	ands	r3, r1
 800062a:	2b00      	cmp	r3, #0
 800062c:	d00d      	beq.n	800064a <HAL_ADC_PollForConversion+0x12e>
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	6919      	ldr	r1, [r3, #16]
 8000634:	4b35      	ldr	r3, [pc, #212]	; (800070c <HAL_ADC_PollForConversion+0x1f0>)
 8000636:	400b      	ands	r3, r1
 8000638:	2b00      	cmp	r3, #0
 800063a:	d108      	bne.n	800064e <HAL_ADC_PollForConversion+0x132>
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	68d9      	ldr	r1, [r3, #12]
 8000642:	4b32      	ldr	r3, [pc, #200]	; (800070c <HAL_ADC_PollForConversion+0x1f0>)
 8000644:	400b      	ands	r3, r1
 8000646:	2b00      	cmp	r3, #0
 8000648:	d101      	bne.n	800064e <HAL_ADC_PollForConversion+0x132>
 800064a:	2354      	movs	r3, #84	; 0x54
 800064c:	e000      	b.n	8000650 <HAL_ADC_PollForConversion+0x134>
 800064e:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000650:	fb03 f302 	mul.w	r3, r3, r2
 8000654:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000656:	e01d      	b.n	8000694 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800065e:	d016      	beq.n	800068e <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d007      	beq.n	8000676 <HAL_ADC_PollForConversion+0x15a>
 8000666:	f7ff fdc9 	bl	80001fc <HAL_GetTick>
 800066a:	4602      	mov	r2, r0
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	1ad2      	subs	r2, r2, r3
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	429a      	cmp	r2, r3
 8000674:	d90b      	bls.n	800068e <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800067a:	f043 0204 	orr.w	r2, r3, #4
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2200      	movs	r2, #0
 8000686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800068a:	2303      	movs	r3, #3
 800068c:	e030      	b.n	80006f0 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	3301      	adds	r3, #1
 8000692:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000694:	68fa      	ldr	r2, [r7, #12]
 8000696:	693b      	ldr	r3, [r7, #16]
 8000698:	429a      	cmp	r2, r3
 800069a:	d3dd      	bcc.n	8000658 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f06f 0212 	mvn.w	r2, #18
 80006a4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80006bc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80006c0:	d115      	bne.n	80006ee <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	68db      	ldr	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d111      	bne.n	80006ee <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d105      	bne.n	80006ee <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006e6:	f043 0201 	orr.w	r2, r3, #1
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80006ee:	2300      	movs	r3, #0
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	371c      	adds	r7, #28
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd90      	pop	{r4, r7, pc}
 80006f8:	20000008 	.word	0x20000008
 80006fc:	24924924 	.word	0x24924924
 8000700:	00924924 	.word	0x00924924
 8000704:	12492492 	.word	0x12492492
 8000708:	00492492 	.word	0x00492492
 800070c:	00249249 	.word	0x00249249

08000710 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800071e:	4618      	mov	r0, r3
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000728:	b490      	push	{r4, r7}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000732:	2300      	movs	r3, #0
 8000734:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000740:	2b01      	cmp	r3, #1
 8000742:	d101      	bne.n	8000748 <HAL_ADC_ConfigChannel+0x20>
 8000744:	2302      	movs	r3, #2
 8000746:	e0dc      	b.n	8000902 <HAL_ADC_ConfigChannel+0x1da>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2201      	movs	r2, #1
 800074c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	2b06      	cmp	r3, #6
 8000756:	d81c      	bhi.n	8000792 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6819      	ldr	r1, [r3, #0]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	685a      	ldr	r2, [r3, #4]
 8000766:	4613      	mov	r3, r2
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	4413      	add	r3, r2
 800076c:	3b05      	subs	r3, #5
 800076e:	221f      	movs	r2, #31
 8000770:	fa02 f303 	lsl.w	r3, r2, r3
 8000774:	43db      	mvns	r3, r3
 8000776:	4018      	ands	r0, r3
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	681c      	ldr	r4, [r3, #0]
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	685a      	ldr	r2, [r3, #4]
 8000780:	4613      	mov	r3, r2
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	4413      	add	r3, r2
 8000786:	3b05      	subs	r3, #5
 8000788:	fa04 f303 	lsl.w	r3, r4, r3
 800078c:	4303      	orrs	r3, r0
 800078e:	634b      	str	r3, [r1, #52]	; 0x34
 8000790:	e03c      	b.n	800080c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	2b0c      	cmp	r3, #12
 8000798:	d81c      	bhi.n	80007d4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6819      	ldr	r1, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	685a      	ldr	r2, [r3, #4]
 80007a8:	4613      	mov	r3, r2
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	4413      	add	r3, r2
 80007ae:	3b23      	subs	r3, #35	; 0x23
 80007b0:	221f      	movs	r2, #31
 80007b2:	fa02 f303 	lsl.w	r3, r2, r3
 80007b6:	43db      	mvns	r3, r3
 80007b8:	4018      	ands	r0, r3
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	681c      	ldr	r4, [r3, #0]
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	685a      	ldr	r2, [r3, #4]
 80007c2:	4613      	mov	r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	4413      	add	r3, r2
 80007c8:	3b23      	subs	r3, #35	; 0x23
 80007ca:	fa04 f303 	lsl.w	r3, r4, r3
 80007ce:	4303      	orrs	r3, r0
 80007d0:	630b      	str	r3, [r1, #48]	; 0x30
 80007d2:	e01b      	b.n	800080c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6819      	ldr	r1, [r3, #0]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	685a      	ldr	r2, [r3, #4]
 80007e2:	4613      	mov	r3, r2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	4413      	add	r3, r2
 80007e8:	3b41      	subs	r3, #65	; 0x41
 80007ea:	221f      	movs	r2, #31
 80007ec:	fa02 f303 	lsl.w	r3, r2, r3
 80007f0:	43db      	mvns	r3, r3
 80007f2:	4018      	ands	r0, r3
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	681c      	ldr	r4, [r3, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	685a      	ldr	r2, [r3, #4]
 80007fc:	4613      	mov	r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	4413      	add	r3, r2
 8000802:	3b41      	subs	r3, #65	; 0x41
 8000804:	fa04 f303 	lsl.w	r3, r4, r3
 8000808:	4303      	orrs	r3, r0
 800080a:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b09      	cmp	r3, #9
 8000812:	d91c      	bls.n	800084e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6819      	ldr	r1, [r3, #0]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	68d8      	ldr	r0, [r3, #12]
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	4613      	mov	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	4413      	add	r3, r2
 8000828:	3b1e      	subs	r3, #30
 800082a:	2207      	movs	r2, #7
 800082c:	fa02 f303 	lsl.w	r3, r2, r3
 8000830:	43db      	mvns	r3, r3
 8000832:	4018      	ands	r0, r3
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	689c      	ldr	r4, [r3, #8]
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4613      	mov	r3, r2
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	4413      	add	r3, r2
 8000842:	3b1e      	subs	r3, #30
 8000844:	fa04 f303 	lsl.w	r3, r4, r3
 8000848:	4303      	orrs	r3, r0
 800084a:	60cb      	str	r3, [r1, #12]
 800084c:	e019      	b.n	8000882 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6819      	ldr	r1, [r3, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	6918      	ldr	r0, [r3, #16]
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	4613      	mov	r3, r2
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	4413      	add	r3, r2
 8000862:	2207      	movs	r2, #7
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	43db      	mvns	r3, r3
 800086a:	4018      	ands	r0, r3
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	689c      	ldr	r4, [r3, #8]
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4613      	mov	r3, r2
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	4413      	add	r3, r2
 800087a:	fa04 f303 	lsl.w	r3, r4, r3
 800087e:	4303      	orrs	r3, r0
 8000880:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2b10      	cmp	r3, #16
 8000888:	d003      	beq.n	8000892 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800088e:	2b11      	cmp	r3, #17
 8000890:	d132      	bne.n	80008f8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a1d      	ldr	r2, [pc, #116]	; (800090c <HAL_ADC_ConfigChannel+0x1e4>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d125      	bne.n	80008e8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d126      	bne.n	80008f8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	6812      	ldr	r2, [r2, #0]
 80008b2:	6892      	ldr	r2, [r2, #8]
 80008b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80008b8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b10      	cmp	r3, #16
 80008c0:	d11a      	bne.n	80008f8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80008c2:	4b13      	ldr	r3, [pc, #76]	; (8000910 <HAL_ADC_ConfigChannel+0x1e8>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a13      	ldr	r2, [pc, #76]	; (8000914 <HAL_ADC_ConfigChannel+0x1ec>)
 80008c8:	fba2 2303 	umull	r2, r3, r2, r3
 80008cc:	0c9a      	lsrs	r2, r3, #18
 80008ce:	4613      	mov	r3, r2
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	4413      	add	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80008d8:	e002      	b.n	80008e0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	3b01      	subs	r3, #1
 80008de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d1f9      	bne.n	80008da <HAL_ADC_ConfigChannel+0x1b2>
 80008e6:	e007      	b.n	80008f8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ec:	f043 0220 	orr.w	r2, r3, #32
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80008f4:	2301      	movs	r3, #1
 80008f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2200      	movs	r2, #0
 80008fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000900:	7bfb      	ldrb	r3, [r7, #15]
}
 8000902:	4618      	mov	r0, r3
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bc90      	pop	{r4, r7}
 800090a:	4770      	bx	lr
 800090c:	40012400 	.word	0x40012400
 8000910:	20000008 	.word	0x20000008
 8000914:	431bde83 	.word	0x431bde83

08000918 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	2b01      	cmp	r3, #1
 8000934:	d039      	beq.n	80009aa <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	6812      	ldr	r2, [r2, #0]
 800093e:	6892      	ldr	r2, [r2, #8]
 8000940:	f042 0201 	orr.w	r2, r2, #1
 8000944:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000946:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <ADC_Enable+0x9c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a1b      	ldr	r2, [pc, #108]	; (80009b8 <ADC_Enable+0xa0>)
 800094c:	fba2 2303 	umull	r2, r3, r2, r3
 8000950:	0c9b      	lsrs	r3, r3, #18
 8000952:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000954:	e002      	b.n	800095c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	3b01      	subs	r3, #1
 800095a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d1f9      	bne.n	8000956 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000962:	f7ff fc4b 	bl	80001fc <HAL_GetTick>
 8000966:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000968:	e018      	b.n	800099c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800096a:	f7ff fc47 	bl	80001fc <HAL_GetTick>
 800096e:	4602      	mov	r2, r0
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	2b02      	cmp	r3, #2
 8000976:	d911      	bls.n	800099c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800097c:	f043 0210 	orr.w	r2, r3, #16
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000988:	f043 0201 	orr.w	r2, r3, #1
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2200      	movs	r2, #0
 8000994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	e007      	b.n	80009ac <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d1df      	bne.n	800096a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000008 	.word	0x20000008
 80009b8:	431bde83 	.word	0x431bde83

080009bc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d127      	bne.n	8000a26 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	6812      	ldr	r2, [r2, #0]
 80009de:	6892      	ldr	r2, [r2, #8]
 80009e0:	f022 0201 	bic.w	r2, r2, #1
 80009e4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80009e6:	f7ff fc09 	bl	80001fc <HAL_GetTick>
 80009ea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80009ec:	e014      	b.n	8000a18 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80009ee:	f7ff fc05 	bl	80001fc <HAL_GetTick>
 80009f2:	4602      	mov	r2, r0
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	2b02      	cmp	r3, #2
 80009fa:	d90d      	bls.n	8000a18 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a00:	f043 0210 	orr.w	r2, r3, #16
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0c:	f043 0201 	orr.w	r2, r3, #1
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000a14:	2301      	movs	r3, #1
 8000a16:	e007      	b.n	8000a28 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	689b      	ldr	r3, [r3, #8]
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d0e3      	beq.n	80009ee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000a26:	2300      	movs	r3, #0
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3710      	adds	r7, #16
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <NVIC_SetPriorityGrouping+0x44>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a62:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <NVIC_SetPriorityGrouping+0x44>)
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	60d3      	str	r3, [r2, #12]
}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <NVIC_GetPriorityGrouping+0x18>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	0a1b      	lsrs	r3, r3, #8
 8000a82:	f003 0307 	and.w	r3, r3, #7
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	6039      	str	r1, [r7, #0]
 8000a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	da0b      	bge.n	8000ac0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa8:	490d      	ldr	r1, [pc, #52]	; (8000ae0 <NVIC_SetPriority+0x4c>)
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	f003 030f 	and.w	r3, r3, #15
 8000ab0:	3b04      	subs	r3, #4
 8000ab2:	683a      	ldr	r2, [r7, #0]
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	0112      	lsls	r2, r2, #4
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	440b      	add	r3, r1
 8000abc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000abe:	e009      	b.n	8000ad4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac0:	4908      	ldr	r1, [pc, #32]	; (8000ae4 <NVIC_SetPriority+0x50>)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	683a      	ldr	r2, [r7, #0]
 8000ac8:	b2d2      	uxtb	r2, r2
 8000aca:	0112      	lsls	r2, r2, #4
 8000acc:	b2d2      	uxtb	r2, r2
 8000ace:	440b      	add	r3, r1
 8000ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00
 8000ae4:	e000e100 	.word	0xe000e100

08000ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b089      	sub	sp, #36	; 0x24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	f1c3 0307 	rsb	r3, r3, #7
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	bf28      	it	cs
 8000b06:	2304      	movcs	r3, #4
 8000b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	2b06      	cmp	r3, #6
 8000b10:	d902      	bls.n	8000b18 <NVIC_EncodePriority+0x30>
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3b03      	subs	r3, #3
 8000b16:	e000      	b.n	8000b1a <NVIC_EncodePriority+0x32>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	1e5a      	subs	r2, r3, #1
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	401a      	ands	r2, r3
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b2e:	2101      	movs	r1, #1
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	1e59      	subs	r1, r3, #1
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	4313      	orrs	r3, r2
         );
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3724      	adds	r7, #36	; 0x24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr

08000b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b58:	d301      	bcc.n	8000b5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e00f      	b.n	8000b7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <SysTick_Config+0x40>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b66:	210f      	movs	r1, #15
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	f7ff ff92 	bl	8000a94 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <SysTick_Config+0x40>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b76:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <SysTick_Config+0x40>)
 8000b78:	2207      	movs	r2, #7
 8000b7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	e000e010 	.word	0xe000e010

08000b8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff ff4b 	bl	8000a30 <NVIC_SetPriorityGrouping>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b086      	sub	sp, #24
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	60b9      	str	r1, [r7, #8]
 8000bac:	607a      	str	r2, [r7, #4]
 8000bae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb4:	f7ff ff60 	bl	8000a78 <NVIC_GetPriorityGrouping>
 8000bb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	68b9      	ldr	r1, [r7, #8]
 8000bbe:	6978      	ldr	r0, [r7, #20]
 8000bc0:	f7ff ff92 	bl	8000ae8 <NVIC_EncodePriority>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff61 	bl	8000a94 <NVIC_SetPriority>
}
 8000bd2:	bf00      	nop
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ffb0 	bl	8000b48 <SysTick_Config>
 8000be8:	4603      	mov	r3, r0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b04      	cmp	r3, #4
 8000c00:	d106      	bne.n	8000c10 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c02:	4a09      	ldr	r2, [pc, #36]	; (8000c28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f043 0304 	orr.w	r3, r3, #4
 8000c0c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000c0e:	e005      	b.n	8000c1c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000c10:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f023 0304 	bic.w	r3, r3, #4
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000e010 	.word	0xe000e010

08000c2c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000c30:	f000 f802 	bl	8000c38 <HAL_SYSTICK_Callback>
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr

08000c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b08b      	sub	sp, #44	; 0x2c
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
 8000c66:	e127      	b.n	8000eb8 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f040 8116 	bne.w	8000eb2 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	2b12      	cmp	r3, #18
 8000c8c:	d034      	beq.n	8000cf8 <HAL_GPIO_Init+0xb4>
 8000c8e:	2b12      	cmp	r3, #18
 8000c90:	d80d      	bhi.n	8000cae <HAL_GPIO_Init+0x6a>
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d02b      	beq.n	8000cee <HAL_GPIO_Init+0xaa>
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d804      	bhi.n	8000ca4 <HAL_GPIO_Init+0x60>
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d031      	beq.n	8000d02 <HAL_GPIO_Init+0xbe>
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d01c      	beq.n	8000cdc <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ca2:	e048      	b.n	8000d36 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000ca4:	2b03      	cmp	r3, #3
 8000ca6:	d043      	beq.n	8000d30 <HAL_GPIO_Init+0xec>
 8000ca8:	2b11      	cmp	r3, #17
 8000caa:	d01b      	beq.n	8000ce4 <HAL_GPIO_Init+0xa0>
          break;
 8000cac:	e043      	b.n	8000d36 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000cae:	4a87      	ldr	r2, [pc, #540]	; (8000ecc <HAL_GPIO_Init+0x288>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d026      	beq.n	8000d02 <HAL_GPIO_Init+0xbe>
 8000cb4:	4a85      	ldr	r2, [pc, #532]	; (8000ecc <HAL_GPIO_Init+0x288>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d806      	bhi.n	8000cc8 <HAL_GPIO_Init+0x84>
 8000cba:	4a85      	ldr	r2, [pc, #532]	; (8000ed0 <HAL_GPIO_Init+0x28c>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d020      	beq.n	8000d02 <HAL_GPIO_Init+0xbe>
 8000cc0:	4a84      	ldr	r2, [pc, #528]	; (8000ed4 <HAL_GPIO_Init+0x290>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d01d      	beq.n	8000d02 <HAL_GPIO_Init+0xbe>
          break;
 8000cc6:	e036      	b.n	8000d36 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000cc8:	4a83      	ldr	r2, [pc, #524]	; (8000ed8 <HAL_GPIO_Init+0x294>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d019      	beq.n	8000d02 <HAL_GPIO_Init+0xbe>
 8000cce:	4a83      	ldr	r2, [pc, #524]	; (8000edc <HAL_GPIO_Init+0x298>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d016      	beq.n	8000d02 <HAL_GPIO_Init+0xbe>
 8000cd4:	4a82      	ldr	r2, [pc, #520]	; (8000ee0 <HAL_GPIO_Init+0x29c>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d013      	beq.n	8000d02 <HAL_GPIO_Init+0xbe>
          break;
 8000cda:	e02c      	b.n	8000d36 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	623b      	str	r3, [r7, #32]
          break;
 8000ce2:	e028      	b.n	8000d36 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	623b      	str	r3, [r7, #32]
          break;
 8000cec:	e023      	b.n	8000d36 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	3308      	adds	r3, #8
 8000cf4:	623b      	str	r3, [r7, #32]
          break;
 8000cf6:	e01e      	b.n	8000d36 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	330c      	adds	r3, #12
 8000cfe:	623b      	str	r3, [r7, #32]
          break;
 8000d00:	e019      	b.n	8000d36 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d102      	bne.n	8000d10 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	623b      	str	r3, [r7, #32]
          break;
 8000d0e:	e012      	b.n	8000d36 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d105      	bne.n	8000d24 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d18:	2308      	movs	r3, #8
 8000d1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69fa      	ldr	r2, [r7, #28]
 8000d20:	611a      	str	r2, [r3, #16]
          break;
 8000d22:	e008      	b.n	8000d36 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d24:	2308      	movs	r3, #8
 8000d26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69fa      	ldr	r2, [r7, #28]
 8000d2c:	615a      	str	r2, [r3, #20]
          break;
 8000d2e:	e002      	b.n	8000d36 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
          break;
 8000d34:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	2bff      	cmp	r3, #255	; 0xff
 8000d3a:	d801      	bhi.n	8000d40 <HAL_GPIO_Init+0xfc>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	e001      	b.n	8000d44 <HAL_GPIO_Init+0x100>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3304      	adds	r3, #4
 8000d44:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	2bff      	cmp	r3, #255	; 0xff
 8000d4a:	d802      	bhi.n	8000d52 <HAL_GPIO_Init+0x10e>
 8000d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	e002      	b.n	8000d58 <HAL_GPIO_Init+0x114>
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	3b08      	subs	r3, #8
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	210f      	movs	r1, #15
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	401a      	ands	r2, r3
 8000d6a:	6a39      	ldr	r1, [r7, #32]
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d72:	431a      	orrs	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	f000 8096 	beq.w	8000eb2 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d86:	4a57      	ldr	r2, [pc, #348]	; (8000ee4 <HAL_GPIO_Init+0x2a0>)
 8000d88:	4b56      	ldr	r3, [pc, #344]	; (8000ee4 <HAL_GPIO_Init+0x2a0>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6193      	str	r3, [r2, #24]
 8000d92:	4b54      	ldr	r3, [pc, #336]	; (8000ee4 <HAL_GPIO_Init+0x2a0>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000d9e:	4a52      	ldr	r2, [pc, #328]	; (8000ee8 <HAL_GPIO_Init+0x2a4>)
 8000da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da2:	089b      	lsrs	r3, r3, #2
 8000da4:	3302      	adds	r3, #2
 8000da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000daa:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dae:	f003 0303 	and.w	r3, r3, #3
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	220f      	movs	r2, #15
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a49      	ldr	r2, [pc, #292]	; (8000eec <HAL_GPIO_Init+0x2a8>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d013      	beq.n	8000df2 <HAL_GPIO_Init+0x1ae>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a48      	ldr	r2, [pc, #288]	; (8000ef0 <HAL_GPIO_Init+0x2ac>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d00d      	beq.n	8000dee <HAL_GPIO_Init+0x1aa>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a47      	ldr	r2, [pc, #284]	; (8000ef4 <HAL_GPIO_Init+0x2b0>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d007      	beq.n	8000dea <HAL_GPIO_Init+0x1a6>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a46      	ldr	r2, [pc, #280]	; (8000ef8 <HAL_GPIO_Init+0x2b4>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d101      	bne.n	8000de6 <HAL_GPIO_Init+0x1a2>
 8000de2:	2303      	movs	r3, #3
 8000de4:	e006      	b.n	8000df4 <HAL_GPIO_Init+0x1b0>
 8000de6:	2304      	movs	r3, #4
 8000de8:	e004      	b.n	8000df4 <HAL_GPIO_Init+0x1b0>
 8000dea:	2302      	movs	r3, #2
 8000dec:	e002      	b.n	8000df4 <HAL_GPIO_Init+0x1b0>
 8000dee:	2301      	movs	r3, #1
 8000df0:	e000      	b.n	8000df4 <HAL_GPIO_Init+0x1b0>
 8000df2:	2300      	movs	r3, #0
 8000df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000df6:	f002 0203 	and.w	r2, r2, #3
 8000dfa:	0092      	lsls	r2, r2, #2
 8000dfc:	4093      	lsls	r3, r2
 8000dfe:	697a      	ldr	r2, [r7, #20]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000e04:	4938      	ldr	r1, [pc, #224]	; (8000ee8 <HAL_GPIO_Init+0x2a4>)
 8000e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e08:	089b      	lsrs	r3, r3, #2
 8000e0a:	3302      	adds	r3, #2
 8000e0c:	697a      	ldr	r2, [r7, #20]
 8000e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d006      	beq.n	8000e2c <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e1e:	4937      	ldr	r1, [pc, #220]	; (8000efc <HAL_GPIO_Init+0x2b8>)
 8000e20:	4b36      	ldr	r3, [pc, #216]	; (8000efc <HAL_GPIO_Init+0x2b8>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	600b      	str	r3, [r1, #0]
 8000e2a:	e006      	b.n	8000e3a <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e2c:	4933      	ldr	r1, [pc, #204]	; (8000efc <HAL_GPIO_Init+0x2b8>)
 8000e2e:	4b33      	ldr	r3, [pc, #204]	; (8000efc <HAL_GPIO_Init+0x2b8>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	4013      	ands	r3, r2
 8000e38:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d006      	beq.n	8000e54 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e46:	492d      	ldr	r1, [pc, #180]	; (8000efc <HAL_GPIO_Init+0x2b8>)
 8000e48:	4b2c      	ldr	r3, [pc, #176]	; (8000efc <HAL_GPIO_Init+0x2b8>)
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	604b      	str	r3, [r1, #4]
 8000e52:	e006      	b.n	8000e62 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e54:	4929      	ldr	r1, [pc, #164]	; (8000efc <HAL_GPIO_Init+0x2b8>)
 8000e56:	4b29      	ldr	r3, [pc, #164]	; (8000efc <HAL_GPIO_Init+0x2b8>)
 8000e58:	685a      	ldr	r2, [r3, #4]
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	4013      	ands	r3, r2
 8000e60:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d006      	beq.n	8000e7c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e6e:	4923      	ldr	r1, [pc, #140]	; (8000efc <HAL_GPIO_Init+0x2b8>)
 8000e70:	4b22      	ldr	r3, [pc, #136]	; (8000efc <HAL_GPIO_Init+0x2b8>)
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	608b      	str	r3, [r1, #8]
 8000e7a:	e006      	b.n	8000e8a <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e7c:	491f      	ldr	r1, [pc, #124]	; (8000efc <HAL_GPIO_Init+0x2b8>)
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <HAL_GPIO_Init+0x2b8>)
 8000e80:	689a      	ldr	r2, [r3, #8]
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	43db      	mvns	r3, r3
 8000e86:	4013      	ands	r3, r2
 8000e88:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d006      	beq.n	8000ea4 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e96:	4919      	ldr	r1, [pc, #100]	; (8000efc <HAL_GPIO_Init+0x2b8>)
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <HAL_GPIO_Init+0x2b8>)
 8000e9a:	68da      	ldr	r2, [r3, #12]
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	60cb      	str	r3, [r1, #12]
 8000ea2:	e006      	b.n	8000eb2 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ea4:	4915      	ldr	r1, [pc, #84]	; (8000efc <HAL_GPIO_Init+0x2b8>)
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <HAL_GPIO_Init+0x2b8>)
 8000ea8:	68da      	ldr	r2, [r3, #12]
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	43db      	mvns	r3, r3
 8000eae:	4013      	ands	r3, r2
 8000eb0:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eba:	2b0f      	cmp	r3, #15
 8000ebc:	f67f aed4 	bls.w	8000c68 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000ec0:	bf00      	nop
 8000ec2:	372c      	adds	r7, #44	; 0x2c
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	10210000 	.word	0x10210000
 8000ed0:	10110000 	.word	0x10110000
 8000ed4:	10120000 	.word	0x10120000
 8000ed8:	10310000 	.word	0x10310000
 8000edc:	10320000 	.word	0x10320000
 8000ee0:	10220000 	.word	0x10220000
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010000 	.word	0x40010000
 8000eec:	40010800 	.word	0x40010800
 8000ef0:	40010c00 	.word	0x40010c00
 8000ef4:	40011000 	.word	0x40011000
 8000ef8:	40011400 	.word	0x40011400
 8000efc:	40010400 	.word	0x40010400

08000f00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	f000 8087 	beq.w	8001028 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f1a:	4b92      	ldr	r3, [pc, #584]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 030c 	and.w	r3, r3, #12
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	d00c      	beq.n	8000f40 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f26:	4b8f      	ldr	r3, [pc, #572]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 030c 	and.w	r3, r3, #12
 8000f2e:	2b08      	cmp	r3, #8
 8000f30:	d112      	bne.n	8000f58 <HAL_RCC_OscConfig+0x58>
 8000f32:	4b8c      	ldr	r3, [pc, #560]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f3e:	d10b      	bne.n	8000f58 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f40:	4b88      	ldr	r3, [pc, #544]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d06c      	beq.n	8001026 <HAL_RCC_OscConfig+0x126>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d168      	bne.n	8001026 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e22d      	b.n	80013b4 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f60:	d106      	bne.n	8000f70 <HAL_RCC_OscConfig+0x70>
 8000f62:	4a80      	ldr	r2, [pc, #512]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 8000f64:	4b7f      	ldr	r3, [pc, #508]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	e02e      	b.n	8000fce <HAL_RCC_OscConfig+0xce>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d10c      	bne.n	8000f92 <HAL_RCC_OscConfig+0x92>
 8000f78:	4a7a      	ldr	r2, [pc, #488]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 8000f7a:	4b7a      	ldr	r3, [pc, #488]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	4a77      	ldr	r2, [pc, #476]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 8000f86:	4b77      	ldr	r3, [pc, #476]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	e01d      	b.n	8000fce <HAL_RCC_OscConfig+0xce>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f9a:	d10c      	bne.n	8000fb6 <HAL_RCC_OscConfig+0xb6>
 8000f9c:	4a71      	ldr	r2, [pc, #452]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 8000f9e:	4b71      	ldr	r3, [pc, #452]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4a6e      	ldr	r2, [pc, #440]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 8000faa:	4b6e      	ldr	r3, [pc, #440]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	e00b      	b.n	8000fce <HAL_RCC_OscConfig+0xce>
 8000fb6:	4a6b      	ldr	r2, [pc, #428]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 8000fb8:	4b6a      	ldr	r3, [pc, #424]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	4a68      	ldr	r2, [pc, #416]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 8000fc4:	4b67      	ldr	r3, [pc, #412]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fcc:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d013      	beq.n	8000ffe <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd6:	f7ff f911 	bl	80001fc <HAL_GetTick>
 8000fda:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fdc:	e008      	b.n	8000ff0 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fde:	f7ff f90d 	bl	80001fc <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b64      	cmp	r3, #100	; 0x64
 8000fea:	d901      	bls.n	8000ff0 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e1e1      	b.n	80013b4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff0:	4b5c      	ldr	r3, [pc, #368]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d0f0      	beq.n	8000fde <HAL_RCC_OscConfig+0xde>
 8000ffc:	e014      	b.n	8001028 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffe:	f7ff f8fd 	bl	80001fc <HAL_GetTick>
 8001002:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001004:	e008      	b.n	8001018 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001006:	f7ff f8f9 	bl	80001fc <HAL_GetTick>
 800100a:	4602      	mov	r2, r0
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	2b64      	cmp	r3, #100	; 0x64
 8001012:	d901      	bls.n	8001018 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e1cd      	b.n	80013b4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001018:	4b52      	ldr	r3, [pc, #328]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d1f0      	bne.n	8001006 <HAL_RCC_OscConfig+0x106>
 8001024:	e000      	b.n	8001028 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001026:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d063      	beq.n	80010fc <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001034:	4b4b      	ldr	r3, [pc, #300]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 030c 	and.w	r3, r3, #12
 800103c:	2b00      	cmp	r3, #0
 800103e:	d00b      	beq.n	8001058 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001040:	4b48      	ldr	r3, [pc, #288]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 030c 	and.w	r3, r3, #12
 8001048:	2b08      	cmp	r3, #8
 800104a:	d11c      	bne.n	8001086 <HAL_RCC_OscConfig+0x186>
 800104c:	4b45      	ldr	r3, [pc, #276]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d116      	bne.n	8001086 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001058:	4b42      	ldr	r3, [pc, #264]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d005      	beq.n	8001070 <HAL_RCC_OscConfig+0x170>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d001      	beq.n	8001070 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e1a1      	b.n	80013b4 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001070:	493c      	ldr	r1, [pc, #240]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 8001072:	4b3c      	ldr	r3, [pc, #240]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	4313      	orrs	r3, r2
 8001082:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001084:	e03a      	b.n	80010fc <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d020      	beq.n	80010d0 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800108e:	4b36      	ldr	r3, [pc, #216]	; (8001168 <HAL_RCC_OscConfig+0x268>)
 8001090:	2201      	movs	r2, #1
 8001092:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001094:	f7ff f8b2 	bl	80001fc <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800109c:	f7ff f8ae 	bl	80001fc <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e182      	b.n	80013b4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ae:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0f0      	beq.n	800109c <HAL_RCC_OscConfig+0x19c>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ba:	492a      	ldr	r1, [pc, #168]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 80010bc:	4b29      	ldr	r3, [pc, #164]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	600b      	str	r3, [r1, #0]
 80010ce:	e015      	b.n	80010fc <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010d0:	4b25      	ldr	r3, [pc, #148]	; (8001168 <HAL_RCC_OscConfig+0x268>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d6:	f7ff f891 	bl	80001fc <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010de:	f7ff f88d 	bl	80001fc <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e161      	b.n	80013b4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f0:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1f0      	bne.n	80010de <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0308 	and.w	r3, r3, #8
 8001104:	2b00      	cmp	r3, #0
 8001106:	d039      	beq.n	800117c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d019      	beq.n	8001144 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001110:	4b16      	ldr	r3, [pc, #88]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001116:	f7ff f871 	bl	80001fc <HAL_GetTick>
 800111a:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800111c:	e008      	b.n	8001130 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800111e:	f7ff f86d 	bl	80001fc <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e141      	b.n	80013b4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <HAL_RCC_OscConfig+0x264>)
 8001132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d0f0      	beq.n	800111e <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 800113c:	2001      	movs	r0, #1
 800113e:	f000 fab7 	bl	80016b0 <RCC_Delay>
 8001142:	e01b      	b.n	800117c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114a:	f7ff f857 	bl	80001fc <HAL_GetTick>
 800114e:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001150:	e00e      	b.n	8001170 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001152:	f7ff f853 	bl	80001fc <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d907      	bls.n	8001170 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e127      	b.n	80013b4 <HAL_RCC_OscConfig+0x4b4>
 8001164:	40021000 	.word	0x40021000
 8001168:	42420000 	.word	0x42420000
 800116c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001170:	4b92      	ldr	r3, [pc, #584]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 8001172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1ea      	bne.n	8001152 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 80a6 	beq.w	80012d6 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800118e:	4b8b      	ldr	r3, [pc, #556]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10d      	bne.n	80011b6 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	4a88      	ldr	r2, [pc, #544]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 800119c:	4b87      	ldr	r3, [pc, #540]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 800119e:	69db      	ldr	r3, [r3, #28]
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a4:	61d3      	str	r3, [r2, #28]
 80011a6:	4b85      	ldr	r3, [pc, #532]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011b2:	2301      	movs	r3, #1
 80011b4:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b6:	4b82      	ldr	r3, [pc, #520]	; (80013c0 <HAL_RCC_OscConfig+0x4c0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d118      	bne.n	80011f4 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011c2:	4a7f      	ldr	r2, [pc, #508]	; (80013c0 <HAL_RCC_OscConfig+0x4c0>)
 80011c4:	4b7e      	ldr	r3, [pc, #504]	; (80013c0 <HAL_RCC_OscConfig+0x4c0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ce:	f7ff f815 	bl	80001fc <HAL_GetTick>
 80011d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d4:	e008      	b.n	80011e8 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011d6:	f7ff f811 	bl	80001fc <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b64      	cmp	r3, #100	; 0x64
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e0e5      	b.n	80013b4 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e8:	4b75      	ldr	r3, [pc, #468]	; (80013c0 <HAL_RCC_OscConfig+0x4c0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0f0      	beq.n	80011d6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d106      	bne.n	800120a <HAL_RCC_OscConfig+0x30a>
 80011fc:	4a6f      	ldr	r2, [pc, #444]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 80011fe:	4b6f      	ldr	r3, [pc, #444]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6213      	str	r3, [r2, #32]
 8001208:	e02d      	b.n	8001266 <HAL_RCC_OscConfig+0x366>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10c      	bne.n	800122c <HAL_RCC_OscConfig+0x32c>
 8001212:	4a6a      	ldr	r2, [pc, #424]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 8001214:	4b69      	ldr	r3, [pc, #420]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	f023 0301 	bic.w	r3, r3, #1
 800121c:	6213      	str	r3, [r2, #32]
 800121e:	4a67      	ldr	r2, [pc, #412]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 8001220:	4b66      	ldr	r3, [pc, #408]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	f023 0304 	bic.w	r3, r3, #4
 8001228:	6213      	str	r3, [r2, #32]
 800122a:	e01c      	b.n	8001266 <HAL_RCC_OscConfig+0x366>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	2b05      	cmp	r3, #5
 8001232:	d10c      	bne.n	800124e <HAL_RCC_OscConfig+0x34e>
 8001234:	4a61      	ldr	r2, [pc, #388]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 8001236:	4b61      	ldr	r3, [pc, #388]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 8001238:	6a1b      	ldr	r3, [r3, #32]
 800123a:	f043 0304 	orr.w	r3, r3, #4
 800123e:	6213      	str	r3, [r2, #32]
 8001240:	4a5e      	ldr	r2, [pc, #376]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 8001242:	4b5e      	ldr	r3, [pc, #376]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6213      	str	r3, [r2, #32]
 800124c:	e00b      	b.n	8001266 <HAL_RCC_OscConfig+0x366>
 800124e:	4a5b      	ldr	r2, [pc, #364]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 8001250:	4b5a      	ldr	r3, [pc, #360]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	f023 0301 	bic.w	r3, r3, #1
 8001258:	6213      	str	r3, [r2, #32]
 800125a:	4a58      	ldr	r2, [pc, #352]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 800125c:	4b57      	ldr	r3, [pc, #348]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	f023 0304 	bic.w	r3, r3, #4
 8001264:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d015      	beq.n	800129a <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126e:	f7fe ffc5 	bl	80001fc <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001274:	e00a      	b.n	800128c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001276:	f7fe ffc1 	bl	80001fc <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	f241 3288 	movw	r2, #5000	; 0x1388
 8001284:	4293      	cmp	r3, r2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e093      	b.n	80013b4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800128c:	4b4b      	ldr	r3, [pc, #300]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0ee      	beq.n	8001276 <HAL_RCC_OscConfig+0x376>
 8001298:	e014      	b.n	80012c4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129a:	f7fe ffaf 	bl	80001fc <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a0:	e00a      	b.n	80012b8 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012a2:	f7fe ffab 	bl	80001fc <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e07d      	b.n	80013b4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b8:	4b40      	ldr	r3, [pc, #256]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1ee      	bne.n	80012a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d105      	bne.n	80012d6 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ca:	4a3c      	ldr	r2, [pc, #240]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 80012cc:	4b3b      	ldr	r3, [pc, #236]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d069      	beq.n	80013b2 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012de:	4b37      	ldr	r3, [pc, #220]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 030c 	and.w	r3, r3, #12
 80012e6:	2b08      	cmp	r3, #8
 80012e8:	d061      	beq.n	80013ae <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d146      	bne.n	8001380 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f2:	4b34      	ldr	r3, [pc, #208]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7fe ff80 	bl	80001fc <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001300:	f7fe ff7c 	bl	80001fc <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e050      	b.n	80013b4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001312:	4b2a      	ldr	r3, [pc, #168]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f0      	bne.n	8001300 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001326:	d108      	bne.n	800133a <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001328:	4924      	ldr	r1, [pc, #144]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 800132a:	4b24      	ldr	r3, [pc, #144]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	4313      	orrs	r3, r2
 8001338:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800133a:	4820      	ldr	r0, [pc, #128]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 800133c:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a19      	ldr	r1, [r3, #32]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	430b      	orrs	r3, r1
 800134e:	4313      	orrs	r3, r2
 8001350:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 8001354:	2201      	movs	r2, #1
 8001356:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7fe ff50 	bl	80001fc <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001360:	f7fe ff4c 	bl	80001fc <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e020      	b.n	80013b4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001372:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0f0      	beq.n	8001360 <HAL_RCC_OscConfig+0x460>
 800137e:	e018      	b.n	80013b2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001380:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001386:	f7fe ff39 	bl	80001fc <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800138e:	f7fe ff35 	bl	80001fc <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e009      	b.n	80013b4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_RCC_OscConfig+0x4bc>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1f0      	bne.n	800138e <HAL_RCC_OscConfig+0x48e>
 80013ac:	e001      	b.n	80013b2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40007000 	.word	0x40007000
 80013c4:	42420060 	.word	0x42420060

080013c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80013d6:	4b72      	ldr	r3, [pc, #456]	; (80015a0 <HAL_RCC_ClockConfig+0x1d8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0207 	and.w	r2, r3, #7
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d210      	bcs.n	8001406 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013e4:	496e      	ldr	r1, [pc, #440]	; (80015a0 <HAL_RCC_ClockConfig+0x1d8>)
 80013e6:	4b6e      	ldr	r3, [pc, #440]	; (80015a0 <HAL_RCC_ClockConfig+0x1d8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f023 0207 	bic.w	r2, r3, #7
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013f4:	4b6a      	ldr	r3, [pc, #424]	; (80015a0 <HAL_RCC_ClockConfig+0x1d8>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0207 	and.w	r2, r3, #7
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d001      	beq.n	8001406 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e0c8      	b.n	8001598 <HAL_RCC_ClockConfig+0x1d0>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d008      	beq.n	8001424 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001412:	4964      	ldr	r1, [pc, #400]	; (80015a4 <HAL_RCC_ClockConfig+0x1dc>)
 8001414:	4b63      	ldr	r3, [pc, #396]	; (80015a4 <HAL_RCC_ClockConfig+0x1dc>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b00      	cmp	r3, #0
 800142e:	d06a      	beq.n	8001506 <HAL_RCC_ClockConfig+0x13e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d107      	bne.n	8001448 <HAL_RCC_ClockConfig+0x80>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001438:	4b5a      	ldr	r3, [pc, #360]	; (80015a4 <HAL_RCC_ClockConfig+0x1dc>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d115      	bne.n	8001470 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e0a7      	b.n	8001598 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b02      	cmp	r3, #2
 800144e:	d107      	bne.n	8001460 <HAL_RCC_ClockConfig+0x98>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001450:	4b54      	ldr	r3, [pc, #336]	; (80015a4 <HAL_RCC_ClockConfig+0x1dc>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d109      	bne.n	8001470 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e09b      	b.n	8001598 <HAL_RCC_ClockConfig+0x1d0>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001460:	4b50      	ldr	r3, [pc, #320]	; (80015a4 <HAL_RCC_ClockConfig+0x1dc>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e093      	b.n	8001598 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001470:	494c      	ldr	r1, [pc, #304]	; (80015a4 <HAL_RCC_ClockConfig+0x1dc>)
 8001472:	4b4c      	ldr	r3, [pc, #304]	; (80015a4 <HAL_RCC_ClockConfig+0x1dc>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f023 0203 	bic.w	r2, r3, #3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	4313      	orrs	r3, r2
 8001480:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001482:	f7fe febb 	bl	80001fc <HAL_GetTick>
 8001486:	60f8      	str	r0, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d112      	bne.n	80014b6 <HAL_RCC_ClockConfig+0xee>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001490:	e00a      	b.n	80014a8 <HAL_RCC_ClockConfig+0xe0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001492:	f7fe feb3 	bl	80001fc <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_ClockConfig+0xe0>
        {
          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e077      	b.n	8001598 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80014a8:	4b3e      	ldr	r3, [pc, #248]	; (80015a4 <HAL_RCC_ClockConfig+0x1dc>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 030c 	and.w	r3, r3, #12
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d1ee      	bne.n	8001492 <HAL_RCC_ClockConfig+0xca>
 80014b4:	e027      	b.n	8001506 <HAL_RCC_ClockConfig+0x13e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d11d      	bne.n	80014fa <HAL_RCC_ClockConfig+0x132>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014be:	e00a      	b.n	80014d6 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c0:	f7fe fe9c 	bl	80001fc <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e060      	b.n	8001598 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014d6:	4b33      	ldr	r3, [pc, #204]	; (80015a4 <HAL_RCC_ClockConfig+0x1dc>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 030c 	and.w	r3, r3, #12
 80014de:	2b08      	cmp	r3, #8
 80014e0:	d1ee      	bne.n	80014c0 <HAL_RCC_ClockConfig+0xf8>
 80014e2:	e010      	b.n	8001506 <HAL_RCC_ClockConfig+0x13e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e4:	f7fe fe8a 	bl	80001fc <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_ClockConfig+0x132>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e04e      	b.n	8001598 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80014fa:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <HAL_RCC_ClockConfig+0x1dc>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 030c 	and.w	r3, r3, #12
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1ee      	bne.n	80014e4 <HAL_RCC_ClockConfig+0x11c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001506:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <HAL_RCC_ClockConfig+0x1d8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0207 	and.w	r2, r3, #7
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d910      	bls.n	8001536 <HAL_RCC_ClockConfig+0x16e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001514:	4922      	ldr	r1, [pc, #136]	; (80015a0 <HAL_RCC_ClockConfig+0x1d8>)
 8001516:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <HAL_RCC_ClockConfig+0x1d8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f023 0207 	bic.w	r2, r3, #7
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	4313      	orrs	r3, r2
 8001522:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001524:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <HAL_RCC_ClockConfig+0x1d8>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0207 	and.w	r2, r3, #7
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	d001      	beq.n	8001536 <HAL_RCC_ClockConfig+0x16e>
    {
      return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e030      	b.n	8001598 <HAL_RCC_ClockConfig+0x1d0>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	2b00      	cmp	r3, #0
 8001540:	d008      	beq.n	8001554 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001542:	4918      	ldr	r1, [pc, #96]	; (80015a4 <HAL_RCC_ClockConfig+0x1dc>)
 8001544:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <HAL_RCC_ClockConfig+0x1dc>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	4313      	orrs	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0308 	and.w	r3, r3, #8
 800155c:	2b00      	cmp	r3, #0
 800155e:	d009      	beq.n	8001574 <HAL_RCC_ClockConfig+0x1ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001560:	4910      	ldr	r1, [pc, #64]	; (80015a4 <HAL_RCC_ClockConfig+0x1dc>)
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <HAL_RCC_ClockConfig+0x1dc>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	4313      	orrs	r3, r2
 8001572:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001574:	f000 f81c 	bl	80015b0 <HAL_RCC_GetSysClockFreq>
 8001578:	4601      	mov	r1, r0
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <HAL_RCC_ClockConfig+0x1dc>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	091b      	lsrs	r3, r3, #4
 8001580:	f003 030f 	and.w	r3, r3, #15
 8001584:	4a08      	ldr	r2, [pc, #32]	; (80015a8 <HAL_RCC_ClockConfig+0x1e0>)
 8001586:	5cd3      	ldrb	r3, [r2, r3]
 8001588:	fa21 f303 	lsr.w	r3, r1, r3
 800158c:	4a07      	ldr	r2, [pc, #28]	; (80015ac <HAL_RCC_ClockConfig+0x1e4>)
 800158e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001590:	2000      	movs	r0, #0
 8001592:	f7fe fdf1 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40022000 	.word	0x40022000
 80015a4:	40021000 	.word	0x40021000
 80015a8:	08001e70 	.word	0x08001e70
 80015ac:	20000008 	.word	0x20000008

080015b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015b0:	b490      	push	{r4, r7}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015b6:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015b8:	1d3c      	adds	r4, r7, #4
 80015ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015c0:	4b28      	ldr	r3, [pc, #160]	; (8001664 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
 80015ce:	2300      	movs	r3, #0
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015da:	4b23      	ldr	r3, [pc, #140]	; (8001668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	d002      	beq.n	80015f0 <HAL_RCC_GetSysClockFreq+0x40>
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d003      	beq.n	80015f6 <HAL_RCC_GetSysClockFreq+0x46>
 80015ee:	e02d      	b.n	800164c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015f0:	4b1e      	ldr	r3, [pc, #120]	; (800166c <HAL_RCC_GetSysClockFreq+0xbc>)
 80015f2:	623b      	str	r3, [r7, #32]
      break;
 80015f4:	e02d      	b.n	8001652 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	0c9b      	lsrs	r3, r3, #18
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001602:	4413      	add	r3, r2
 8001604:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001608:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d013      	beq.n	800163c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001614:	4b14      	ldr	r3, [pc, #80]	; (8001668 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	0c5b      	lsrs	r3, r3, #17
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001622:	4413      	add	r3, r2
 8001624:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001628:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	4a0f      	ldr	r2, [pc, #60]	; (800166c <HAL_RCC_GetSysClockFreq+0xbc>)
 800162e:	fb02 f203 	mul.w	r2, r2, r3
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	fbb2 f3f3 	udiv	r3, r2, r3
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
 800163a:	e004      	b.n	8001646 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	4a0c      	ldr	r2, [pc, #48]	; (8001670 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001640:	fb02 f303 	mul.w	r3, r2, r3
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	623b      	str	r3, [r7, #32]
      break;
 800164a:	e002      	b.n	8001652 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800164c:	4b07      	ldr	r3, [pc, #28]	; (800166c <HAL_RCC_GetSysClockFreq+0xbc>)
 800164e:	623b      	str	r3, [r7, #32]
      break;
 8001650:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001652:	6a3b      	ldr	r3, [r7, #32]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3728      	adds	r7, #40	; 0x28
 8001658:	46bd      	mov	sp, r7
 800165a:	bc90      	pop	{r4, r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	08001e28 	.word	0x08001e28
 8001664:	08001e38 	.word	0x08001e38
 8001668:	40021000 	.word	0x40021000
 800166c:	007a1200 	.word	0x007a1200
 8001670:	003d0900 	.word	0x003d0900

08001674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001678:	4b02      	ldr	r3, [pc, #8]	; (8001684 <HAL_RCC_GetHCLKFreq+0x10>)
 800167a:	681b      	ldr	r3, [r3, #0]
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	20000008 	.word	0x20000008

08001688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800168c:	f7ff fff2 	bl	8001674 <HAL_RCC_GetHCLKFreq>
 8001690:	4601      	mov	r1, r0
 8001692:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	0adb      	lsrs	r3, r3, #11
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	4a03      	ldr	r2, [pc, #12]	; (80016ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800169e:	5cd3      	ldrb	r3, [r2, r3]
 80016a0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80016a4:	4618      	mov	r0, r3
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40021000 	.word	0x40021000
 80016ac:	08001e80 	.word	0x08001e80

080016b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016b8:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <RCC_Delay+0x34>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <RCC_Delay+0x38>)
 80016be:	fba2 2303 	umull	r2, r3, r2, r3
 80016c2:	0a5b      	lsrs	r3, r3, #9
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	fb02 f303 	mul.w	r3, r2, r3
 80016ca:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80016cc:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	1e5a      	subs	r2, r3, #1
 80016d2:	60fa      	str	r2, [r7, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1f9      	bne.n	80016cc <RCC_Delay+0x1c>
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000008 	.word	0x20000008
 80016e8:	10624dd3 	.word	0x10624dd3

080016ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b00      	cmp	r3, #0
 8001706:	d07d      	beq.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001708:	2300      	movs	r3, #0
 800170a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800170c:	4b4f      	ldr	r3, [pc, #316]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800170e:	69db      	ldr	r3, [r3, #28]
 8001710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d10d      	bne.n	8001734 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001718:	4a4c      	ldr	r2, [pc, #304]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800171a:	4b4c      	ldr	r3, [pc, #304]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001722:	61d3      	str	r3, [r2, #28]
 8001724:	4b49      	ldr	r3, [pc, #292]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001730:	2301      	movs	r3, #1
 8001732:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001734:	4b46      	ldr	r3, [pc, #280]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173c:	2b00      	cmp	r3, #0
 800173e:	d118      	bne.n	8001772 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001740:	4a43      	ldr	r2, [pc, #268]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001742:	4b43      	ldr	r3, [pc, #268]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800174c:	f7fe fd56 	bl	80001fc <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001752:	e008      	b.n	8001766 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001754:	f7fe fd52 	bl	80001fc <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b64      	cmp	r3, #100	; 0x64
 8001760:	d901      	bls.n	8001766 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e06d      	b.n	8001842 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001766:	4b3a      	ldr	r3, [pc, #232]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f0      	beq.n	8001754 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001772:	4b36      	ldr	r3, [pc, #216]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800177a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d02e      	beq.n	80017e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	429a      	cmp	r2, r3
 800178e:	d027      	beq.n	80017e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001790:	4b2e      	ldr	r3, [pc, #184]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001798:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800179a:	4b2e      	ldr	r3, [pc, #184]	; (8001854 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800179c:	2201      	movs	r2, #1
 800179e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80017a0:	4b2c      	ldr	r3, [pc, #176]	; (8001854 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80017a6:	4a29      	ldr	r2, [pc, #164]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d014      	beq.n	80017e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b6:	f7fe fd21 	bl	80001fc <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017bc:	e00a      	b.n	80017d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017be:	f7fe fd1d 	bl	80001fc <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e036      	b.n	8001842 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d4:	4b1d      	ldr	r3, [pc, #116]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0ee      	beq.n	80017be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80017e0:	491a      	ldr	r1, [pc, #104]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017f2:	7dfb      	ldrb	r3, [r7, #23]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d105      	bne.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f8:	4a14      	ldr	r2, [pc, #80]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001802:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d008      	beq.n	8001822 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001810:	490e      	ldr	r1, [pc, #56]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	4313      	orrs	r3, r2
 8001820:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	2b00      	cmp	r3, #0
 800182c:	d008      	beq.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800182e:	4907      	ldr	r1, [pc, #28]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40021000 	.word	0x40021000
 8001850:	40007000 	.word	0x40007000
 8001854:	42420440 	.word	0x42420440

08001858 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b08d      	sub	sp, #52	; 0x34
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001860:	4b57      	ldr	r3, [pc, #348]	; (80019c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001862:	f107 040c 	add.w	r4, r7, #12
 8001866:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001868:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800186c:	4b55      	ldr	r3, [pc, #340]	; (80019c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001872:	2300      	movs	r3, #0
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
 8001876:	2300      	movs	r3, #0
 8001878:	62fb      	str	r3, [r7, #44]	; 0x2c
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
 8001882:	2300      	movs	r3, #0
 8001884:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b02      	cmp	r3, #2
 800188a:	f000 8084 	beq.w	8001996 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800188e:	2b10      	cmp	r3, #16
 8001890:	d002      	beq.n	8001898 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8001892:	2b01      	cmp	r3, #1
 8001894:	d049      	beq.n	800192a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
  default: 
    {
      break;
 8001896:	e08d      	b.n	80019b4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->CFGR;
 8001898:	4b4b      	ldr	r3, [pc, #300]	; (80019c8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 800189e:	4b4a      	ldr	r3, [pc, #296]	; (80019c8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 8083 	beq.w	80019b2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	0c9b      	lsrs	r3, r3, #18
 80018b0:	f003 030f 	and.w	r3, r3, #15
 80018b4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80018b8:	4413      	add	r3, r2
 80018ba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018be:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d018      	beq.n	80018fc <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018ca:	4b3f      	ldr	r3, [pc, #252]	; (80019c8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	0c5b      	lsrs	r3, r3, #17
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80018d8:	4413      	add	r3, r2
 80018da:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00d      	beq.n	8001906 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80018ea:	4a38      	ldr	r2, [pc, #224]	; (80019cc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f2:	6a3a      	ldr	r2, [r7, #32]
 80018f4:	fb02 f303 	mul.w	r3, r2, r3
 80018f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018fa:	e004      	b.n	8001906 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018fc:	6a3b      	ldr	r3, [r7, #32]
 80018fe:	4a34      	ldr	r2, [pc, #208]	; (80019d0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001900:	fb02 f303 	mul.w	r3, r2, r3
 8001904:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001906:	4b30      	ldr	r3, [pc, #192]	; (80019c8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001912:	d102      	bne.n	800191a <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
          frequency = pllclk;
 8001914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001918:	e04b      	b.n	80019b2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          frequency = (pllclk * 2) / 3;
 800191a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4a2d      	ldr	r2, [pc, #180]	; (80019d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8001920:	fba2 2303 	umull	r2, r3, r2, r3
 8001924:	085b      	lsrs	r3, r3, #1
 8001926:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001928:	e043      	b.n	80019b2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
      temp_reg = RCC->BDCR;
 800192a:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800193a:	d108      	bne.n	800194e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
        frequency = LSE_VALUE;
 8001946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
 800194c:	e022      	b.n	8001994 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001958:	d109      	bne.n	800196e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
 800195a:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        frequency = LSI_VALUE;
 8001966:	f649 4340 	movw	r3, #40000	; 0x9c40
 800196a:	62bb      	str	r3, [r7, #40]	; 0x28
 800196c:	e012      	b.n	8001994 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001974:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001978:	d109      	bne.n	800198e <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_RCCEx_GetPeriphCLKFreq+0x136>
        frequency = HSE_VALUE / 128U;
 8001986:	f24f 4324 	movw	r3, #62500	; 0xf424
 800198a:	62bb      	str	r3, [r7, #40]	; 0x28
 800198c:	e002      	b.n	8001994 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = 0U;
 800198e:	2300      	movs	r3, #0
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001992:	e00f      	b.n	80019b4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 8001994:	e00e      	b.n	80019b4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001996:	f7ff fe77 	bl	8001688 <HAL_RCC_GetPCLK2Freq>
 800199a:	4602      	mov	r2, r0
 800199c:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	0b9b      	lsrs	r3, r3, #14
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	3301      	adds	r3, #1
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80019b0:	e000      	b.n	80019b4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      break;
 80019b2:	bf00      	nop
    }
  }
  return(frequency);
 80019b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3734      	adds	r7, #52	; 0x34
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd90      	pop	{r4, r7, pc}
 80019be:	bf00      	nop
 80019c0:	08001e3c 	.word	0x08001e3c
 80019c4:	08001e4c 	.word	0x08001e4c
 80019c8:	40021000 	.word	0x40021000
 80019cc:	007a1200 	.word	0x007a1200
 80019d0:	003d0900 	.word	0x003d0900
 80019d4:	aaaaaaab 	.word	0xaaaaaaab

080019d8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 80019de:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <MX_ADC1_Init+0x74>)
 80019e0:	4a1b      	ldr	r2, [pc, #108]	; (8001a50 <MX_ADC1_Init+0x78>)
 80019e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019e4:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <MX_ADC1_Init+0x74>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <MX_ADC1_Init+0x74>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019f0:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <MX_ADC1_Init+0x74>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <MX_ADC1_Init+0x74>)
 80019f8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80019fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019fe:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <MX_ADC1_Init+0x74>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <MX_ADC1_Init+0x74>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a0a:	4810      	ldr	r0, [pc, #64]	; (8001a4c <MX_ADC1_Init+0x74>)
 8001a0c:	f7fe fc00 	bl	8000210 <HAL_ADC_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <MX_ADC1_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001a16:	2143      	movs	r1, #67	; 0x43
 8001a18:	480e      	ldr	r0, [pc, #56]	; (8001a54 <MX_ADC1_Init+0x7c>)
 8001a1a:	f000 f8eb 	bl	8001bf4 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a22:	2301      	movs	r3, #1
 8001a24:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4807      	ldr	r0, [pc, #28]	; (8001a4c <MX_ADC1_Init+0x74>)
 8001a30:	f7fe fe7a 	bl	8000728 <HAL_ADC_ConfigChannel>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <MX_ADC1_Init+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001a3a:	214d      	movs	r1, #77	; 0x4d
 8001a3c:	4805      	ldr	r0, [pc, #20]	; (8001a54 <MX_ADC1_Init+0x7c>)
 8001a3e:	f000 f8d9 	bl	8001bf4 <_Error_Handler>
  }

}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	2000002c 	.word	0x2000002c
 8001a50:	40012400 	.word	0x40012400
 8001a54:	08001e50 	.word	0x08001e50

08001a58 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <HAL_ADC_MspInit+0x48>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d115      	bne.n	8001a96 <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a6a:	4a0e      	ldr	r2, [pc, #56]	; (8001aa4 <HAL_ADC_MspInit+0x4c>)
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <HAL_ADC_MspInit+0x4c>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a74:	6193      	str	r3, [r2, #24]
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_ADC_MspInit+0x4c>)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
  
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a82:	2301      	movs	r3, #1
 8001a84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a86:	2303      	movs	r3, #3
 8001a88:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8a:	f107 0310 	add.w	r3, r7, #16
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <HAL_ADC_MspInit+0x50>)
 8001a92:	f7ff f8d7 	bl	8000c44 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001a96:	bf00      	nop
 8001a98:	3720      	adds	r7, #32
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40012400 	.word	0x40012400
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010800 	.word	0x40010800

08001aac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ab2:	4a0e      	ldr	r2, [pc, #56]	; (8001aec <MX_GPIO_Init+0x40>)
 8001ab4:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <MX_GPIO_Init+0x40>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	f043 0320 	orr.w	r3, r3, #32
 8001abc:	6193      	str	r3, [r2, #24]
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <MX_GPIO_Init+0x40>)
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	f003 0320 	and.w	r3, r3, #32
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	4a08      	ldr	r2, [pc, #32]	; (8001aec <MX_GPIO_Init+0x40>)
 8001acc:	4b07      	ldr	r3, [pc, #28]	; (8001aec <MX_GPIO_Init+0x40>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	6193      	str	r3, [r2, #24]
 8001ad6:	4b05      	ldr	r3, [pc, #20]	; (8001aec <MX_GPIO_Init+0x40>)
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]

}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr
 8001aec:	40021000 	.word	0x40021000

08001af0 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001af4:	f7fe fb2a 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001af8:	f000 f818 	bl	8001b2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001afc:	f7ff ffd6 	bl	8001aac <MX_GPIO_Init>
  MX_ADC1_Init();
 8001b00:	f7ff ff6a 	bl	80019d8 <MX_ADC1_Init>
  HAL_ADC_Start(&hadc1);
 8001b04:	4807      	ldr	r0, [pc, #28]	; (8001b24 <main+0x34>)
 8001b06:	f7fe fc5b 	bl	80003c0 <HAL_ADC_Start>
  while (1)
  {

  /* USER CODE END WHILE */

	  HAL_ADC_PollForConversion(&hadc1,1000);
 8001b0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b0e:	4805      	ldr	r0, [pc, #20]	; (8001b24 <main+0x34>)
 8001b10:	f7fe fd04 	bl	800051c <HAL_ADC_PollForConversion>
	  value = HAL_ADC_GetValue(&hadc1);
 8001b14:	4803      	ldr	r0, [pc, #12]	; (8001b24 <main+0x34>)
 8001b16:	f7fe fdfb 	bl	8000710 <HAL_ADC_GetValue>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	4b02      	ldr	r3, [pc, #8]	; (8001b28 <main+0x38>)
 8001b1e:	601a      	str	r2, [r3, #0]
	  HAL_ADC_PollForConversion(&hadc1,1000);
 8001b20:	e7f3      	b.n	8001b0a <main+0x1a>
 8001b22:	bf00      	nop
 8001b24:	2000002c 	.word	0x2000002c
 8001b28:	2000005c 	.word	0x2000005c

08001b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b094      	sub	sp, #80	; 0x50
 8001b30:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b32:	2301      	movs	r3, #1
 8001b34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b40:	2301      	movs	r3, #1
 8001b42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b44:	2302      	movs	r3, #2
 8001b46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b4e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff f9d1 	bl	8000f00 <HAL_RCC_OscConfig>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <SystemClock_Config+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001b64:	218f      	movs	r1, #143	; 0x8f
 8001b66:	4821      	ldr	r0, [pc, #132]	; (8001bec <SystemClock_Config+0xc0>)
 8001b68:	f000 f844 	bl	8001bf4 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b6c:	230f      	movs	r3, #15
 8001b6e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b70:	2302      	movs	r3, #2
 8001b72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b7c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	2102      	movs	r1, #2
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fc1d 	bl	80013c8 <HAL_RCC_ClockConfig>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <SystemClock_Config+0x70>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001b94:	219d      	movs	r1, #157	; 0x9d
 8001b96:	4815      	ldr	r0, [pc, #84]	; (8001bec <SystemClock_Config+0xc0>)
 8001b98:	f000 f82c 	bl	8001bf4 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001ba0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ba4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fd9f 	bl	80016ec <HAL_RCCEx_PeriphCLKConfig>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <SystemClock_Config+0x90>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001bb4:	21a4      	movs	r1, #164	; 0xa4
 8001bb6:	480d      	ldr	r0, [pc, #52]	; (8001bec <SystemClock_Config+0xc0>)
 8001bb8:	f000 f81c 	bl	8001bf4 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001bbc:	f7ff fd5a 	bl	8001674 <HAL_RCC_GetHCLKFreq>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <SystemClock_Config+0xc4>)
 8001bc4:	fba3 2302 	umull	r2, r3, r3, r2
 8001bc8:	099b      	lsrs	r3, r3, #6
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff f805 	bl	8000bda <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001bd0:	2004      	movs	r0, #4
 8001bd2:	f7ff f80f 	bl	8000bf4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	f04f 30ff 	mov.w	r0, #4294967295
 8001bde:	f7fe ffe0 	bl	8000ba2 <HAL_NVIC_SetPriority>
}
 8001be2:	bf00      	nop
 8001be4:	3750      	adds	r7, #80	; 0x50
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	08001e60 	.word	0x08001e60
 8001bf0:	10624dd3 	.word	0x10624dd3

08001bf4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8001bfe:	e7fe      	b.n	8001bfe <_Error_Handler+0xa>

08001c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c06:	4a2b      	ldr	r2, [pc, #172]	; (8001cb4 <HAL_MspInit+0xb4>)
 8001c08:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <HAL_MspInit+0xb4>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6193      	str	r3, [r2, #24]
 8001c12:	4b28      	ldr	r3, [pc, #160]	; (8001cb4 <HAL_MspInit+0xb4>)
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1e:	4a25      	ldr	r2, [pc, #148]	; (8001cb4 <HAL_MspInit+0xb4>)
 8001c20:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <HAL_MspInit+0xb4>)
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c28:	61d3      	str	r3, [r2, #28]
 8001c2a:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <HAL_MspInit+0xb4>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c36:	2003      	movs	r0, #3
 8001c38:	f7fe ffa8 	bl	8000b8c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2100      	movs	r1, #0
 8001c40:	f06f 000b 	mvn.w	r0, #11
 8001c44:	f7fe ffad 	bl	8000ba2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	f06f 000a 	mvn.w	r0, #10
 8001c50:	f7fe ffa7 	bl	8000ba2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001c54:	2200      	movs	r2, #0
 8001c56:	2100      	movs	r1, #0
 8001c58:	f06f 0009 	mvn.w	r0, #9
 8001c5c:	f7fe ffa1 	bl	8000ba2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2100      	movs	r1, #0
 8001c64:	f06f 0004 	mvn.w	r0, #4
 8001c68:	f7fe ff9b 	bl	8000ba2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2100      	movs	r1, #0
 8001c70:	f06f 0003 	mvn.w	r0, #3
 8001c74:	f7fe ff95 	bl	8000ba2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	f06f 0001 	mvn.w	r0, #1
 8001c80:	f7fe ff8f 	bl	8000ba2 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001c84:	2200      	movs	r2, #0
 8001c86:	2100      	movs	r1, #0
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8c:	f7fe ff89 	bl	8000ba2 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c90:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <HAL_MspInit+0xb8>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <HAL_MspInit+0xb8>)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cac:	bf00      	nop
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40010000 	.word	0x40010000

08001cbc <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <HardFault_Handler+0x4>

08001cce <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd2:	e7fe      	b.n	8001cd2 <MemManage_Handler+0x4>

08001cd4 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <BusFault_Handler+0x4>

08001cda <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cde:	e7fe      	b.n	8001cde <UsageFault_Handler+0x4>

08001ce0 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d08:	f7fe fa66 	bl	80001d8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001d0c:	f7fe ff8e 	bl	8000c2c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001d18:	4a15      	ldr	r2, [pc, #84]	; (8001d70 <SystemInit+0x5c>)
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <SystemInit+0x5c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001d24:	4912      	ldr	r1, [pc, #72]	; (8001d70 <SystemInit+0x5c>)
 8001d26:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <SystemInit+0x5c>)
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <SystemInit+0x60>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001d30:	4a0f      	ldr	r2, [pc, #60]	; (8001d70 <SystemInit+0x5c>)
 8001d32:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <SystemInit+0x5c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d40:	4a0b      	ldr	r2, [pc, #44]	; (8001d70 <SystemInit+0x5c>)
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <SystemInit+0x5c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d4a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001d4c:	4a08      	ldr	r2, [pc, #32]	; (8001d70 <SystemInit+0x5c>)
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <SystemInit+0x5c>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001d56:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <SystemInit+0x5c>)
 8001d5a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001d5e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <SystemInit+0x64>)
 8001d62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d66:	609a      	str	r2, [r3, #8]
#endif 
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	40021000 	.word	0x40021000
 8001d74:	f8ff0000 	.word	0xf8ff0000
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001d7c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001d7e:	e003      	b.n	8001d88 <LoopCopyDataInit>

08001d80 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001d82:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001d84:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001d86:	3104      	adds	r1, #4

08001d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d88:	480a      	ldr	r0, [pc, #40]	; (8001db4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001d8c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d8e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d90:	d3f6      	bcc.n	8001d80 <CopyDataInit>
  ldr r2, =_sbss
 8001d92:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001d94:	e002      	b.n	8001d9c <LoopFillZerobss>

08001d96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d98:	f842 3b04 	str.w	r3, [r2], #4

08001d9c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001d9e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001da0:	d3f9      	bcc.n	8001d96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001da2:	f7ff ffb7 	bl	8001d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001da6:	f000 f80f 	bl	8001dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001daa:	f7ff fea1 	bl	8001af0 <main>
  bx lr
 8001dae:	4770      	bx	lr
  ldr r3, =_sidata
 8001db0:	08001e90 	.word	0x08001e90
  ldr r0, =_sdata
 8001db4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001db8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001dbc:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001dc0:	20000060 	.word	0x20000060

08001dc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dc4:	e7fe      	b.n	8001dc4 <ADC1_2_IRQHandler>
	...

08001dc8 <__libc_init_array>:
 8001dc8:	b570      	push	{r4, r5, r6, lr}
 8001dca:	2500      	movs	r5, #0
 8001dcc:	4e0c      	ldr	r6, [pc, #48]	; (8001e00 <__libc_init_array+0x38>)
 8001dce:	4c0d      	ldr	r4, [pc, #52]	; (8001e04 <__libc_init_array+0x3c>)
 8001dd0:	1ba4      	subs	r4, r4, r6
 8001dd2:	10a4      	asrs	r4, r4, #2
 8001dd4:	42a5      	cmp	r5, r4
 8001dd6:	d109      	bne.n	8001dec <__libc_init_array+0x24>
 8001dd8:	f000 f81a 	bl	8001e10 <_init>
 8001ddc:	2500      	movs	r5, #0
 8001dde:	4e0a      	ldr	r6, [pc, #40]	; (8001e08 <__libc_init_array+0x40>)
 8001de0:	4c0a      	ldr	r4, [pc, #40]	; (8001e0c <__libc_init_array+0x44>)
 8001de2:	1ba4      	subs	r4, r4, r6
 8001de4:	10a4      	asrs	r4, r4, #2
 8001de6:	42a5      	cmp	r5, r4
 8001de8:	d105      	bne.n	8001df6 <__libc_init_array+0x2e>
 8001dea:	bd70      	pop	{r4, r5, r6, pc}
 8001dec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001df0:	4798      	blx	r3
 8001df2:	3501      	adds	r5, #1
 8001df4:	e7ee      	b.n	8001dd4 <__libc_init_array+0xc>
 8001df6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001dfa:	4798      	blx	r3
 8001dfc:	3501      	adds	r5, #1
 8001dfe:	e7f2      	b.n	8001de6 <__libc_init_array+0x1e>
 8001e00:	08001e88 	.word	0x08001e88
 8001e04:	08001e88 	.word	0x08001e88
 8001e08:	08001e88 	.word	0x08001e88
 8001e0c:	08001e8c 	.word	0x08001e8c

08001e10 <_init>:
 8001e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e12:	bf00      	nop
 8001e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e16:	bc08      	pop	{r3}
 8001e18:	469e      	mov	lr, r3
 8001e1a:	4770      	bx	lr

08001e1c <_fini>:
 8001e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e1e:	bf00      	nop
 8001e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e22:	bc08      	pop	{r3}
 8001e24:	469e      	mov	lr, r3
 8001e26:	4770      	bx	lr
